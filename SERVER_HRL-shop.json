{
    "exportFormatVersion": 2,
    "exportTime": "2021-08-19 13:27:18",
    "containerVersion": {
        "path": "accounts/4702886441/containers/49102390/versions/0",
        "accountId": "4702886441",
        "containerId": "49102390",
        "containerVersionId": "0",
        "container": {
            "path": "accounts/4702886441/containers/49102390",
            "accountId": "4702886441",
            "containerId": "49102390",
            "name": "SERVER-hairlossdhtshampoo.com",
            "publicId": "GTM-N77P2JX",
            "usageContext": [
                "SERVER"
            ],
            "fingerprint": "1627481777850",
            "tagManagerUrl": "https://tagmanager.google.com/#/container/accounts/4702886441/containers/49102390/workspaces?apiLink=container"
        },
        "variable": [
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "variableId": "8",
                "name": "FB Conversions API Token",
                "type": "c",
                "notes": "How to generate this: https://knowledge.getelevar.com/how-to-create-facebook-conversion-api-token",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "EAAHOUQzePsABAGrQodLjGSgprwlWNdFoaU6K7EgduMs25ZCuHbew4nuHBMjekmSu3LktY1E5q8XljA9csBopE8LilZBYUZAJk2qU6UkJkbOkMUaUZAEXxTRVByArOI4tyf4UHvN4QTVy5WMTesJPX2aLDA1o2OBQVImsNF5P2xPoH7svkIw8"
                    }
                ],
                "fingerprint": "1627632158161",
                "parentFolderId": "7",
                "formatValue": {}
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "variableId": "9",
                "name": "FB Pixel ID",
                "type": "c",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "1786511278040806"
                    }
                ],
                "fingerprint": "1627632145664",
                "parentFolderId": "7",
                "formatValue": {}
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "variableId": "11",
                "name": "GTM Web Container ID",
                "type": "c",
                "notes": "This is used for the GTM Proxy feature. Update with your WEB CONTAINER ID.\n\nhttps://knowledge.getelevar.com/gtm-proxy",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "GTM-P83SQKB"
                    }
                ],
                "fingerprint": "1627632137740",
                "formatValue": {}
            }
        ],
        "folder": [
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "folderId": "6",
                "name": "Elevar / Facebook",
                "fingerprint": "1627632107944"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "folderId": "7",
                "name": "Update After Importing",
                "fingerprint": "1627632107945"
            }
        ],
        "builtInVariable": [
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "type": "EVENT_NAME",
                "name": "Event Name"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "type": "REQUEST_PATH",
                "name": "Request Path"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "type": "REQUEST_METHOD",
                "name": "Request Method"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "type": "CLIENT_NAME",
                "name": "Client Name"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "type": "QUERY_STRING",
                "name": "Query String"
            }
        ],
        "fingerprint": "1629379638583",
        "tagManagerUrl": "https://tagmanager.google.com/#/versions/accounts/4702886441/containers/49102390/versions/0?apiLink=version",
        "customTemplate": [
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "templateId": "5",
                "name": "Facebook Events API",
                "fingerprint": "1627632107943",
                "templateData": "___INFO___\n\n{\n  \"type\": \"CLIENT\",\n  \"id\": \"cvt_temp_public_id\",\n  \"version\": 1,\n  \"securityGroups\": [],\n  \"displayName\": \"Facebook Events API\",\n  \"brand\": {\n    \"id\": \"brand_dummy\",\n    \"displayName\": \"\"\n  },\n  \"description\": \"Handles the following events:\\nViewContent\\nAddToCart\\nViewContent\\nCustomizeProduct\\nSearch\\nCompleteRegistration\\nAddPaymentInfo\\nInitiateCheckout\\nPurchase\",\n  \"containerContexts\": [\n    \"SERVER\"\n  ]\n}\n\n\n___TEMPLATE_PARAMETERS___\n\n[\n  {\n    \"type\": \"SELECT\",\n    \"name\": \"facebookApiVersion\",\n    \"displayName\": \"Facebook API Version\",\n    \"macrosInSelect\": false,\n    \"selectItems\": [\n      {\n        \"value\": \"v8.0\",\n        \"displayValue\": \"v8.0\"\n      },\n      {\n        \"value\": \"v9.0\",\n        \"displayValue\": \"v9.0\"\n      },\n      {\n        \"value\": \"v10.0\",\n        \"displayValue\": \"v10.0\"\n      },\n      {\n        \"value\": \"v11.0\",\n        \"displayValue\": \"v11.0\"\n      },\n      {\n        \"value\": \"v12.0\",\n        \"displayValue\": \"v12.0\"\n      },\n      {\n        \"value\": \"v13.0\",\n        \"displayValue\": \"v13.0\"\n      }\n    ],\n    \"simpleValueType\": true,\n    \"defaultValue\": \"v10.0\"\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"facebookAccessToken\",\n    \"displayName\": \"Facebook Access Token\",\n    \"simpleValueType\": true\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"facebookPixelId\",\n    \"displayName\": \"Facebook Pixel Id\",\n    \"simpleValueType\": true\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"facebookTestCode\",\n    \"displayName\": \"Facebook Test Code\",\n    \"simpleValueType\": true\n  },\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"debug\",\n    \"checkboxText\": \"Debug\",\n    \"simpleValueType\": true\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"monitoringEndpoint\",\n    \"displayName\": \"Monitoring Endpoint\",\n    \"simpleValueType\": true,\n    \"help\": \"URL for sending monitoring events.\"\n  }\n]\n\n\n___SANDBOXED_JS_FOR_SERVER___\n\nconst claimRequest = require(\"claimRequest\");\nconst encodeUriComponent = require(\"encodeUriComponent\");\nconst getContainerVersion = require(\"getContainerVersion\");\nconst getCookieValues = require(\"getCookieValues\");\nconst getRemoteAddress = require(\"getRemoteAddress\");\nconst getRequestHeader = require(\"getRequestHeader\");\nconst getRequestPath = require(\"getRequestPath\");\nconst getRequestQueryParameters = require(\"getRequestQueryParameters\");\nconst getTimestampMillis = require(\"getTimestampMillis\");\nconst getType = require(\"getType\");\nconst JSON = require(\"JSON\");\nconst logToConsole = require(\"logToConsole\");\nconst makeString = require(\"makeString\");\nconst Math = require(\"Math\");\nconst returnResponse = require(\"returnResponse\");\nconst sendHttpGet = require(\"sendHttpGet\");\nconst sendHttpRequest = require(\"sendHttpRequest\");\nconst setCookie = require(\"setCookie\");\nconst setPixelResponse = require(\"setPixelResponse\");\nconst sha256Sync = require(\"sha256Sync\");\n\n/****************** UTILITIES ******************/\n\nconst log = args => {\n  if (data.debug) {\n    logToConsole(\"FB Events:\", args);\n  }\n};\n\nconst hash = str => sha256Sync(str.toLowerCase(), { outputEncoding: \"hex\" });\n\nconst getObjectKeys = object => {\n  let keys = [];\n  for (const name in object) {\n    keys.push(name);\n  }\n  return keys;\n};\n\nconst serialize = obj => {\n  let str = [];\n  for (const objKey in obj) {\n    if (obj[objKey] || obj[objKey] === 0) {\n      str.push(\n        encodeUriComponent(makeString(objKey)) +\n          \"=\" +\n          encodeUriComponent(makeString(obj[objKey]))\n      );\n    }\n  }\n  return str.join(\"&\");\n};\n\n/*************** END UTILITIES ****************/\n\n/************* HELPER FUNCTIONS ***************/\n\nconst refreshCookie = () => {\n  const fbCookie = getCookieValues(\"_fbc\")[0];\n  if (fbCookie) {\n    setCookie(\"_fbc\", fbCookie, {\n      domain: \"auto\",\n      path: \"/\",\n      \"max-age\": 60 * 60 * 24 * 30 * 3,\n      samesite: \"Lax\",\n      secure: false\n    });\n  }\n};\n\nconst getCustomData = params => {\n  const customData = {};\n  if (params.currency) customData.currency = params.currency;\n  if (params.order_id) customData.order_id = params.order_id;\n  if (params.value) customData.value = params.value;\n  if (params.num_items) customData.num_items = params.num_items;\n  if (params.contents) customData.contents = JSON.parse(params.contents);\n  if (params.content_type) customData.content_type = params.content_type;\n  return customData;\n};\n\nconst getUserData = params => {\n  const _fbc = getCookieValues(\"_fbc\")[0];\n  const _fbp = getCookieValues(\"_fbp\")[0];\n\n  const userData = {\n    client_ip_address: getRemoteAddress(),\n    client_user_agent: getRequestHeader(\"user-agent\"),\n    fbc: _fbc,\n    fbp: _fbp\n  };\n  if (params.email) userData.em = hash(params.email);\n  if (params.customer_id) userData.external_id = hash(params.customer_id);\n  if (params.phone) {\n    const phone = params.phone\n      .replace(\"-\", \"\")\n      .replace(\"(\", \"\")\n      .replace(\")\", \"\")\n      .replace(\"+\", \"\")\n      .replace(\" \", \"\");\n    userData.ph = hash(phone);\n  }\n  if (params.firstname) userData.fn = hash(params.firstname);\n  if (params.lastname) userData.ln = hash(params.lastname);\n  if (params.city) {\n    userData.ct = hash(params.city);\n  } else {\n    const city = getRequestHeader(\"X-Appengine-City\");\n    if (city) {\n      userData.ct = hash(city);\n    }\n  }\n  if (params.state) {\n    userData.st = hash(params.state);\n  } else {\n    const region = getRequestHeader(\"X-Appengine-Region\");\n    if (region) {\n      userData.st = hash(region);\n    }\n  }\n  if (params.country) {\n    userData.country = hash(params.country);\n  } else {\n    const country = getRequestHeader(\"X-Appengine-Country\");\n    if (country) {\n      userData.country = hash(country);\n    }\n  }\n  return userData;\n};\n\nconst getInvalidParams = fbParams => {\n  const required = [\"event_name\", \"event_time\", \"user_data\", \"action_source\"];\n  const missing = required.filter(key => !fbParams[key]);\n  if (missing.length > 0)\n    return \"missing parameters: \" + JSON.stringify(missing);\n\n  if (\n    fbParams.event_name === \"Purchase\" ||\n    fbParams.event_name === \"SubscriptionPurchase\"\n  ) {\n    if (!fbParams.custom_data.currency)\n      return \"custom_data.currency required for Purchase\";\n  }\n\n  if (getType(fbParams.custom_data.contents) === \"array\") {\n    if (\n      fbParams.custom_data.content_type === \"product\" &&\n      fbParams.custom_data.contents.length !== 1\n    ) {\n      return \"custom_data.contents should have one item with content_type product\";\n    }\n    for (let i = 0; i < fbParams.custom_data.contents.length; i++) {\n      let item = fbParams.custom_data.contents[i];\n      if (!item[\"id\"] || !item[\"quantity\"] || !item[\"item_price\"]) {\n        return \"custom_data.contents missing id, quantity, or item_price\";\n      }\n    }\n  }\n\n  if (fbParams.event_name !== \"InitiateCheckout\") {\n    if (fbParams.custom_data.num_items) {\n      return \"custom_data.num_items only valid for InitiateCheckout\";\n    }\n  }\n};\n\nconst getEventName = params => {\n  if (params.event_name === \"SubscriptionPurchase\") {\n    return \"Purchase\";\n  }\n  return params.event_name;\n};\nconst hasLDUEnabled = () => {\n  return getCookieValues(\"ccpaoptin\")[0];\n};\n\nconst getBody = params => {\n  let body = {\n    event_name: getEventName(params),\n    action_source: \"website\",\n    event_time: Math.floor(getTimestampMillis() / 1000),\n    event_id: params.event_id,\n    event_source_url: params.source,\n    user_data: getUserData(params),\n    custom_data: getCustomData(params),\n    opt_out: params.consent === \"no\" ? true : false\n  };\n\n  if (hasLDUEnabled()) {\n    body.data_processing_options = [\"LDU\"];\n    body.data_processing_options_country = 1;\n    body.data_processing_options_state = 1000;\n  }\n  return body;\n};\n\nconst getPostUrl = () => {\n  return (\n    \"https://graph.facebook.com/\" +\n    data.facebookApiVersion +\n    \"/\" +\n    data.facebookPixelId +\n    \"/events?access_token=\" +\n    data.facebookAccessToken\n  );\n};\n\nconst encodePostBody = params => {\n  return (\n    \"data=\" +\n    encodeUriComponent(JSON.stringify([getBody(params)])) +\n    (params.test_code ? \"&test_event_code=\" + params.test_code : \"\")\n  );\n};\n\nconst sendFbRequest = params => {\n  const body = getBody(params);\n  sendHttpRequest(\n    getPostUrl(),\n    (statusCode, headers, fbBody) => {\n      if (statusCode !== 200) {\n        log(\"Error from Facebook Conversions API: \" + fbBody);\n        logResult(params.ctid, JSON.parse(fbBody).error, body, false);\n      } else {\n        log(\"Successful response from Facebook Conversions API: \" + fbBody);\n        const invalidValuesMessage = getInvalidParams(body);\n        let error;\n        if (invalidValuesMessage) {\n          error = {\n            code: -1,\n            error_user_title: invalidValuesMessage\n          };\n        }\n        logResult(params.ctid, error, body, true);\n      }\n    },\n    {\n      headers: { content_type: \"application/x-www-form-urlencoded\" },\n      method: \"POST\",\n      timeout: 5000\n    },\n    encodePostBody(params)\n  );\n};\n\nconst shouldSendSubscribeEvent = params => {\n  return params.event_name === \"SubscriptionPurchase\" && params.subscribe;\n};\n\n/*********** END HELPER FUNCTIONS *************/\n\n/************* MONITORING FUNCTIONS ***************/\n\nconst getBaseLoggingData = (\n  webClientId,\n  errorResponse,\n  fbBodySent,\n  successful\n) => {\n  const containerVersion = getContainerVersion();\n  const queryParams = getRequestQueryParameters();\n  const params = {\n    successful: successful ? \"1\" : \"0\",\n    ss_client_id: containerVersion[\"containerId\"],\n    web_client_id: webClientId,\n    channel: \"Facebook\",\n    event_name: fbBodySent.event_name,\n    page_url: fbBodySent.event_source_url,\n    /** @todo Double check this situation. Revisit when web container passes in consent. **/\n    consent: fbBodySent.opt_out === false ? \"yes\" : \"no\"\n  };\n\n  if (queryParams.utm_source) params.utm_source = queryParams.utm_source;\n  if (queryParams.utm_medium) params.utm_medium = queryParams.utm_medium;\n  if (queryParams.utm_campaign) params.utm_campaign = queryParams.utm_campaign;\n  if (queryParams.utm_term) params.utm_term = queryParams.utm_term;\n  if (queryParams.utm_content) params.utm_content = queryParams.utm_content;\n  if (queryParams.fbclid) params.fbclid = queryParams.fbclid;\n  if (queryParams.customer_order_count)\n    params.customer_order_count = queryParams.customer_order_count;\n  if (queryParams.customer_total_spent)\n    params.customer_total_spent = queryParams.customer_total_spent;\n\n  if (fbBodySent.custom_data) {\n    params.order_id = fbBodySent.custom_data.order_id;\n    params.revenue = fbBodySent.custom_data.value;\n    params.currency = fbBodySent.custom_data.currency;\n  }\n  if (errorResponse) {\n    params.error_code = errorResponse.error_subcode || errorResponse.code;\n    params.error_message =\n      errorResponse.error_user_title || errorResponse.message;\n    params.attempted_request = JSON.stringify(fbBodySent);\n  }\n  return params;\n};\n\nconst createLoggingUrl = (\n  webClientId,\n  errorResponse,\n  fbBodySent,\n  successful\n) => {\n  const params = getBaseLoggingData(\n    webClientId,\n    errorResponse,\n    fbBodySent,\n    successful\n  );\n  return data.monitoringEndpoint + \"?\" + serialize(params);\n};\n\nconst logResult = (webClientId, errorResponse, fbBodySent, successful) => {\n  if (!data.monitoringEndpoint) return;\n  sendHttpGet(\n    createLoggingUrl(webClientId, errorResponse, fbBodySent, successful),\n    (statusCode, __, ___) => {},\n    {\n      method: \"GET\",\n      timeout: 5000\n    }\n  );\n};\n\n/*********** END MONITORING FUNCTIONS *************/\n\nconst params = getRequestQueryParameters();\nif (\n  getRequestPath().indexOf(\"/efbc.gif\") === 0 &&\n  getObjectKeys(params).length > 0\n) {\n  claimRequest();\n\n  log(\"Params from url:\" + JSON.stringify(params));\n\n  log(\"Sending body object to FB: \" + JSON.stringify(getBody(params)));\n\n  refreshCookie();\n\n  sendFbRequest(params);\n\n  if (shouldSendSubscribeEvent(params)) {\n    let subscribeParams = getRequestQueryParameters();\n    subscribeParams.event_name = \"Subscribe\";\n    subscribeParams.event_id = \"sub_\" + subscribeParams.event_id;\n    log(\n      \"Sending body object to FB: \" + JSON.stringify(getBody(subscribeParams))\n    );\n    sendFbRequest(subscribeParams);\n  }\n\n  setPixelResponse();\n  returnResponse();\n}\n\n\n___SERVER_PERMISSIONS___\n\n[\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"read_request\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"requestAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        },\n        {\n          \"key\": \"headerAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        },\n        {\n          \"key\": \"queryParameterAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"get_cookies\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"cookieAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"return_response\",\n        \"versionId\": \"1\"\n      },\n      \"param\": []\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"logging\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"environments\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"all\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"access_response\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"writeResponseAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        },\n        {\n          \"key\": \"writeHeaderAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"specific\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"send_http\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"allowedUrls\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"read_container_data\",\n        \"versionId\": \"1\"\n      },\n      \"param\": []\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"set_cookies\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"allowedCookies\",\n          \"value\": {\n            \"type\": 2,\n            \"listItem\": [\n              {\n                \"type\": 3,\n                \"mapKey\": [\n                  {\n                    \"type\": 1,\n                    \"string\": \"name\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"domain\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"path\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"secure\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"session\"\n                  }\n                ],\n                \"mapValue\": [\n                  {\n                    \"type\": 1,\n                    \"string\": \"_fbc\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"*\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"*\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"any\"\n                  },\n                  {\n                    \"type\": 1,\n                    \"string\": \"any\"\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  }\n]\n\n\n___TESTS___\n\nscenarios: []\n\n\n___NOTES___\n\nCreated on 1/15/2021, 1:22:19 PM\n\n\n"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "templateId": "13",
                "name": "Shopify Order Webhook Listener",
                "fingerprint": "1628608616542",
                "templateData": "___INFO___\n\n{\n  \"type\": \"CLIENT\",\n  \"id\": \"cvt_temp_public_id\",\n  \"version\": 1,\n  \"securityGroups\": [],\n  \"displayName\": \"Shopify Order Webhook Listener\",\n  \"brand\": {\n    \"id\": \"brand_dummy\",\n    \"displayName\": \"\"\n  },\n  \"description\": \"Sends Shopify Webhook events to Google Analytics\\nVersion 2.21.1\\n\\nVisit the changelog here:\\nhttps://knowledge.getelevar.com/how-to-configure-google-analytics-webhook-integration-with-server-side-container\",\n  \"containerContexts\": [\n    \"SERVER\"\n  ]\n}\n\n\n___TEMPLATE_PARAMETERS___\n\n[\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"debug\",\n    \"checkboxText\": \"Debug\",\n    \"simpleValueType\": true\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"monitoringEndpoint\",\n    \"displayName\": \"Monitoring Endpoint\",\n    \"simpleValueType\": true,\n    \"help\": \"URL for sending monitoring events.\"\n  },\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"enableGa3Events\",\n    \"checkboxText\": \"Enable GA3 Event\",\n    \"simpleValueType\": true,\n    \"help\": \"Use this if you haven\\u0027t upgraded your property to GA4.\"\n  },\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"enableGa4Events\",\n    \"checkboxText\": \"Enable GA4 Event\",\n    \"simpleValueType\": true,\n    \"help\": \"Use this if you have upgraded to GA4.\"\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"ga3measurementId\",\n    \"displayName\": \"GA3 UA ID\",\n    \"simpleValueType\": true,\n    \"valueHint\": \"UA-12345-6\",\n    \"enablingConditions\": [\n      {\n        \"paramName\": \"enableGa3Events\",\n        \"paramValue\": true,\n        \"type\": \"EQUALS\"\n      }\n    ]\n  },\n  {\n    \"type\": \"TEXT\",\n    \"name\": \"ga4measurementId\",\n    \"displayName\": \"GA4 Measurement ID\",\n    \"simpleValueType\": true,\n    \"valueHint\": \"G-123456\",\n    \"enablingConditions\": [\n      {\n        \"paramName\": \"enableGa4Events\",\n        \"paramValue\": true,\n        \"type\": \"EQUALS\"\n      }\n    ]\n  },\n  {\n    \"type\": \"SELECT\",\n    \"name\": \"productAttributeForIdentifying\",\n    \"displayName\": \"Product Attribute for Identifying\",\n    \"selectItems\": [\n      {\n        \"value\": \"product_sku\",\n        \"displayValue\": \"Product Sku\"\n      },\n      {\n        \"value\": \"product_id\",\n        \"displayValue\": \"Product ID\"\n      },\n      {\n        \"value\": \"variant_id\",\n        \"displayValue\": \"Variant ID\"\n      }\n    ],\n    \"simpleValueType\": true,\n    \"help\": \"Use the same value that is used as the product identifier in Google Analytics.\",\n    \"defaultValue\": \"product_sku\"\n  },\n  {\n    \"type\": \"SELECT\",\n    \"name\": \"orderAttributeForIdentifying\",\n    \"displayName\": \"Order Attribute for Identifying\",\n    \"selectItems\": [\n      {\n        \"value\": \"id\",\n        \"displayValue\": \"Order ID (Example: 3665808261276)\"\n      },\n      {\n        \"value\": \"name\",\n        \"displayValue\": \"Order Name (Example: #1023)\"\n      }\n    ],\n    \"simpleValueType\": true,\n    \"help\": \"Use the same value that is used as the transaction ID in Google Analytics.\",\n    \"defaultValue\": \"name\"\n  },\n  {\n    \"type\": \"SIMPLE_TABLE\",\n    \"name\": \"orderTagsBlacklist\",\n    \"displayName\": \"Order Tags that should not be sent to Google Analytics\",\n    \"simpleTableColumns\": [\n      {\n        \"defaultValue\": \"\",\n        \"displayName\": \"Order Tags to Ignore\",\n        \"name\": \"order_tags\",\n        \"type\": \"TEXT\"\n      }\n    ]\n  },\n  {\n    \"type\": \"SIMPLE_TABLE\",\n    \"name\": \"channelBlacklist\",\n    \"displayName\": \"Channels that should not be sent to Google Analytics\",\n    \"simpleTableColumns\": [\n      {\n        \"defaultValue\": \"\",\n        \"displayName\": \"Channels to Ignore\",\n        \"name\": \"channel\",\n        \"type\": \"TEXT\"\n      }\n    ],\n    \"help\": \"This is the source_name on the order.\"\n  },\n  {\n    \"type\": \"SIMPLE_TABLE\",\n    \"name\": \"gatewaysBlacklist\",\n    \"displayName\": \"Order gateways that should not be sent to Google Analytics\",\n    \"simpleTableColumns\": [\n      {\n        \"defaultValue\": \"\",\n        \"displayName\": \"Order Gateways to Ignore\",\n        \"name\": \"gateway\",\n        \"type\": \"TEXT\"\n      }\n    ]\n  },\n  {\n    \"type\": \"GROUP\",\n    \"name\": \"draftOrdersConfiguration\",\n    \"displayName\": \"Draft Order Configuration\",\n    \"groupStyle\": \"NO_ZIPPY\",\n    \"subParams\": [\n      {\n        \"type\": \"CHECKBOX\",\n        \"name\": \"sendDraftOrdersToGA\",\n        \"checkboxText\": \"Enable Sending Draft Orders To Google Analytics\",\n        \"simpleValueType\": true,\n        \"subParams\": [\n          {\n            \"type\": \"TEXT\",\n            \"name\": \"draftOrderSource\",\n            \"displayName\": \"Source\",\n            \"simpleValueType\": true\n          },\n          {\n            \"type\": \"TEXT\",\n            \"name\": \"draftOrderMedium\",\n            \"displayName\": \"Medium\",\n            \"simpleValueType\": true\n          },\n          {\n            \"type\": \"TEXT\",\n            \"name\": \"draftOrderCampaign\",\n            \"displayName\": \"Campaign\",\n            \"simpleValueType\": true\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"sendRefundsToGA\",\n    \"checkboxText\": \"Enable Sending Refunds to Google Analytics\",\n    \"simpleValueType\": true\n  },\n  {\n    \"type\": \"CHECKBOX\",\n    \"name\": \"useLastUtmParams\",\n    \"checkboxText\": \"Use Last UTM Params\",\n    \"simpleValueType\": true,\n    \"help\": \"This is an advanced feature that will allows for using the initial UTM params or the last found UTM params. For example, if this is true, a user that comes in via an email and then visits the site again from a FB ad then the FB ad UTM params will be used in attribution with Google Analytics.\"\n  },\n  {\n    \"type\": \"PARAM_TABLE\",\n    \"name\": \"channelOrderSourceMedium\",\n    \"displayName\": \"Channel Source Override\",\n    \"paramTableColumns\": [\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"channel\",\n          \"displayName\": \"Channel Name\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": true\n      },\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"source\",\n          \"displayName\": \"Source\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": false\n      },\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"medium\",\n          \"displayName\": \"Medium\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": false\n      },\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"campaign\",\n          \"displayName\": \"Campaign\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": false\n      }\n    ],\n    \"help\": \"This allows for overriding the source, medium, and campaign if the channel is matched\"\n  },\n  {\n    \"type\": \"PARAM_TABLE\",\n    \"name\": \"tagOrderSourceMedium\",\n    \"displayName\": \"Tag Override\",\n    \"paramTableColumns\": [\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"tag\",\n          \"displayName\": \"Channel Name\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": true\n      },\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"source\",\n          \"displayName\": \"Source\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": false\n      },\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"medium\",\n          \"displayName\": \"Medium\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": false\n      },\n      {\n        \"param\": {\n          \"type\": \"TEXT\",\n          \"name\": \"campaign\",\n          \"displayName\": \"Campaign\",\n          \"simpleValueType\": true\n        },\n        \"isUnique\": false\n      }\n    ],\n    \"help\": \"This allows for overriding the source, medium, and campaign if a tag in the order is matched\"\n  }\n]\n\n\n___SANDBOXED_JS_FOR_SERVER___\n\nconst claimRequest = require(\"claimRequest\");\nconst encodeUriComponent = require(\"encodeUriComponent\");\nconst getContainerVersion = require(\"getContainerVersion\");\nconst getRequestHeader = require(\"getRequestHeader\");\nconst getRequestBody = require(\"getRequestBody\");\nconst getRequestPath = require(\"getRequestPath\");\nconst getRequestQueryParameters = require(\"getRequestQueryParameters\");\nconst JSON = require(\"JSON\");\nconst logToConsole = require(\"logToConsole\");\nconst makeString = require(\"makeString\");\nconst makeNumber = require(\"makeNumber\");\nconst parseUrl = require(\"parseUrl\");\nconst returnResponse = require(\"returnResponse\");\nconst sendEventToGoogleAnalytics = require(\"sendEventToGoogleAnalytics\");\nconst sendHttpGet = require(\"sendHttpGet\");\nconst setPixelResponse = require(\"setPixelResponse\");\nconst setResponseBody = require(\"setResponseBody\");\n\nconst notesPrefix = \"_elevar_\";\n\nconst shouldTrace = false;\n\n/****************** UTILITIES ******************/\n\nconst log = args => {\n  if (data.debug) {\n    logToConsole(\"Shopify Webhook Event:\", args);\n  }\n};\n\nconst trace = args => {\n  if (shouldTrace) {\n    logToConsole(\"Shopify Webhook Event:\", args);\n  }\n};\n\nconst serialize = obj => {\n  let str = [];\n  for (const objKey in obj) {\n    if (obj[objKey] || obj[objKey] === 0) {\n      str.push(\n        encodeUriComponent(makeString(objKey)) +\n          \"=\" +\n          encodeUriComponent(makeString(obj[objKey]))\n      );\n    }\n  }\n  return str.join(\"&\");\n};\n\nconst getMappedConfig = (source, field) => {\n  return source ? source.map(s => s[field]) : [];\n};\n\nconst getReducedValue = (subject, field) => {\n  return subject\n    ? subject.reduce(\n        (acc, refundLineItem) => acc + makeNumber(refundLineItem[field]),\n        0\n      )\n    : 0;\n};\n\n/*************** END UTILITIES ****************/\n\n/************* HELPER FUNCTIONS ***************/\n\nconst getGatewayTagsBlacklist = () => {\n  trace(\"In getGatewayTagsBlacklist\");\n  return getMappedConfig(data.gatewaysBlacklist, \"gateway\");\n};\n\nconst getOrderTagsBlacklist = () => {\n  trace(\"In getOrderTagsBlacklist\");\n  return getMappedConfig(data.orderTagsBlacklist, \"order_tags\");\n};\n\nconst getChannelBlacklist = () => {\n  trace(\"In getChannelBlacklist\");\n  return getMappedConfig(data.channelBlacklist, \"channel\");\n};\n\nconst hasMatchingTags = payload => {\n  trace(\"In hasMatchingTags\");\n  if (\n    payload.tags &&\n    payload.tags.length === 0 &&\n    getOrderTagsBlacklist().length\n  ) {\n    return false;\n  }\n  const orderTags = payload.tags ? payload.tags.split(\", \") : [];\n  const matchingOrderTags = getOrderTagsBlacklist().filter(blacklistedTag => {\n    return orderTags.indexOf(blacklistedTag) > -1;\n  });\n  if (matchingOrderTags.length > 0) {\n    log(\n      \"Ignored payload with tags \" +\n        payload.tags +\n        \" has matching gateway \" +\n        JSON.stringify(getOrderTagsBlacklist())\n    );\n  }\n  return matchingOrderTags.length > 0;\n};\n\nconst hasMatchingGateways = payload => {\n  trace(\"In hasMatchingGateways\");\n  const matchingGateways = getGatewayTagsBlacklist().filter(\n    blacklistedGateway => {\n      return (\n        payload.payment_gateway_names &&\n        payload.payment_gateway_names.indexOf(blacklistedGateway) > -1\n      );\n    }\n  );\n  if (matchingGateways.length > 0) {\n    log(\n      \"Ignored payload with gateways \" +\n        JSON.stringify(payload.payment_gateway_names) +\n        \" has matching gateway \" +\n        JSON.stringify(getGatewayTagsBlacklist())\n    );\n  }\n  return matchingGateways.length > 0;\n};\n\nconst hasMatchingChannels = payload => {\n  trace(\"In hasMatchingChannels\");\n  const hasMatchingChannels =\n    getChannelBlacklist().indexOf(payload.source_name) > -1;\n  if (hasMatchingChannels) {\n    log(\n      \"Ignored payload with channel \" +\n        payload.source_name +\n        \" has matching channels \" +\n        JSON.stringify(getChannelBlacklist())\n    );\n  }\n  return hasMatchingChannels;\n};\n\nconst isOrder = () => {\n  trace(\"In isOrder\");\n  return getRequestHeader(\"X-Shopify-Topic\") === \"orders/create\";\n};\n\nconst isDraftOrder = () => {\n  trace(\"In isDraftOrder\");\n  return getRequestHeader(\"X-Shopify-Topic\") === \"draft_orders/create\";\n};\n\nconst isRefund = () => {\n  trace(\"In isRefund\");\n  return getRequestHeader(\"X-Shopify-Topic\") === \"refunds/create\";\n};\n\nconst shouldSendIfDraftOrder = () => {\n  trace(\"in shouldSendIfDraftOrder\");\n  if (isDraftOrder()) {\n    return data.sendDraftOrdersToGA;\n  }\n  return true;\n};\n\nconst shouldSendIfRefund = () => {\n  trace(\"in shouldSendIfRefund\");\n  if (isRefund()) {\n    return data.sendRefundsToGA;\n  }\n  return true;\n};\n\nconst shouldSendOrder = payload => {\n  trace(\"in shouldSendOrder\");\n  return !(\n    hasMatchingTags(payload) ||\n    hasMatchingGateways(payload) ||\n    hasMatchingChannels(payload)\n  );\n};\n\nconst getInvalidParams = event => {\n  trace(\"in getInvalidParams\");\n  return \"Invalid\";\n};\n\nconst getProductIdentifier = () => {\n  trace(\"in getProductIdentifier\");\n  const productIdentifierMap = {\n    product_sku: \"sku\",\n    product_id: \"product_id\",\n    variant_id: \"variant_id\"\n  };\n  return productIdentifierMap[data.productAttributeForIdentifying];\n};\n\nconst buildLineItems = currency => lineItem => ({\n  item_id: lineItem[getProductIdentifier()],\n  item_name: lineItem.title,\n  quantity: lineItem.quantity,\n  discount: lineItem.total_discount,\n  item_brand: lineItem.vendor,\n  item_variant: lineItem.variant_title,\n  price: makeNumber(lineItem.price),\n  currency: currency\n});\n\nconst getGaClientId = payload =>\n  payload.note_attributes.filter(note => note.name === notesPrefix + \"_ga\");\n\nconst getClientId = payload => {\n  trace(\"In getClientId\");\n  const gaClientId = getGaClientId(payload);\n  if (gaClientId && gaClientId.length > 0) {\n    const gaCookieVal = gaClientId[0].value.split(\".\");\n    if (gaCookieVal.length === 4) {\n      return gaCookieVal.slice(-2).join(\".\");\n    }\n    return gaClientId[0].value;\n  }\n  return payload.customer.id;\n};\n\nconst getParamFromNotes = (payload, param) => {\n  trace(\"In getParamFromNotes\");\n  const matchingNote = payload.note_attributes.filter(\n    note => note.name === notesPrefix + \"visitor_info\"\n  );\n\n  if (matchingNote.length > 0) {\n    const visitorInfo = JSON.parse(matchingNote[0].value);\n    if (visitorInfo && visitorInfo[param]) {\n      return visitorInfo[param];\n    }\n  }\n\n  return false;\n};\n\nconst getQueryParamFromLandingPage = (payload, param) => {\n  trace(\"In getQueryParamFromLandingPage\");\n  const parsedUrl = parseUrl(\n    \"https://test.com\" + (payload.landing_site ? payload.landing_site : \"\")\n  );\n\n  if (parsedUrl && parsedUrl.searchParams && parsedUrl.searchParams[param]) {\n    return parsedUrl.searchParams[param];\n  }\n  return false;\n};\n\nconst getClientDetails = (payload, key) => {\n  trace(\"In getClientDetails\");\n  if (payload.client_details && payload.client_details[key]) {\n    return payload.client_details[key];\n  }\n  return \"\";\n};\n\nconst getEventName = () => {\n  trace(\"In getEventName\");\n  if (isDraftOrder() || isOrder()) return \"purchase\";\n  if (isRefund()) return \"refund\";\n};\n\nconst getRefundCurrencyCode = refund => {\n  trace(\"In getRefundCurrencyCode\");\n  return refund.refund_line_items[0].subtotal_set.shop_money.currency_code;\n};\n\nconst translateLineItems = payload => {\n  trace(\"In translateLineItems\");\n  if (isOrder() || isDraftOrder()) {\n    return payload.line_items.map(buildLineItems(payload.currency));\n  }\n\n  if (isRefund()) {\n    return payload.refund_line_items\n      .map(refundItem => refundItem.line_item)\n      .map(buildLineItems(getRefundCurrencyCode(payload)));\n  }\n};\n\nconst getCustomerId = payload => {\n  trace(\"In getCustomerId\");\n  if (isOrder() || isDraftOrder()) {\n    return payload.customer.id;\n  }\n\n  if (isRefund()) {\n    return payload[\"user_id\"] || \"\";\n  }\n};\n\nconst getTransactionId = payload => {\n  trace(\"In getTransactionId\");\n  if (isOrder() || isDraftOrder()) {\n    return payload[data.orderAttributeForIdentifying];\n  }\n  if (isRefund()) {\n    return payload[\"order_id\"] || payload[\"id\"];\n  }\n};\n\nconst getValue = payload => {\n  trace(\"In getValue\");\n  if (isOrder() || isDraftOrder()) {\n    return payload.total_price;\n  }\n  if (isRefund()) {\n    return getReducedValue(payload.refund_line_items, \"subtotal\") * -1;\n  }\n};\n\nconst getShipping = payload => {\n  return isRefund()\n    ? getReducedValue(payload.shipping_lines, \"price\") * -1\n    : getReducedValue(payload.shipping_lines, \"price\");\n};\n\nconst getTax = payload => {\n  trace(\"In getTax\");\n  if (isOrder() || isDraftOrder()) {\n    return payload.total_tax;\n  }\n  if (isRefund()) {\n    return getReducedValue(payload.refund_line_items, \"total_tax\") * -1;\n  }\n};\n\nconst getLanguage = payload => {\n  trace(\"In getLanguage\");\n  const language = getClientDetails(payload, \"accept_language\");\n  if (language.length > 0) {\n    return language.split(\",\")[0];\n  }\n  return \"\";\n};\n\nconst getUtmParam = (payload, param) => {\n  if (data.useLastUtmParams) {\n    return (\n      getParamFromNotes(payload, param) ||\n      getQueryParamFromLandingPage(payload, param)\n    );\n  } else {\n    return (\n      getQueryParamFromLandingPage(payload, param) ||\n      getParamFromNotes(payload, param)\n    );\n  }\n};\n\nconst buildEvent = (measurementId, version, payload) => {\n  trace(\"In buildEvent\");\n  const event = {\n    \"x-ga-measurement_id\": measurementId,\n    \"x-ga-protocol_version\": version,\n    screen_resolution:\n      getClientDetails(payload, \"browser_width\") +\n      \"x\" +\n      getClientDetails(payload, \"browser_height\"),\n    user_agent: getClientDetails(payload, \"user_agent\"),\n    language: getLanguage(payload),\n    payment_type: payload.gateway === \"paypal\" ? \"Paypal\" : \"Credit Card\",\n    event_name: getEventName(),\n    coupon:\n      payload.discount_codes && payload.discount_codes.length\n        ? payload.discount_codes[0].code\n        : \"\",\n    ip_override: getClientDetails(payload, \"browser_ip\"),\n    currency:\n      isDraftOrder() || isOrder()\n        ? payload.currency\n        : getRefundCurrencyCode(payload),\n    items: translateLineItems(payload),\n    transaction_id: getTransactionId(payload),\n    shipping: getShipping(payload),\n    tax: getTax(payload),\n    value: getValue(payload),\n    user_data: {\n      user_id: getCustomerId(payload)\n    }\n  };\n\n  trace(\"In buildEvent after params\");\n\n  let gaClientId,\n    utmSource,\n    utmMedium,\n    utmCampaign,\n    utmTerm,\n    utmContent,\n    gclid,\n    gclsrc = \"\";\n\n  if (isDraftOrder()) {\n    if (data.draftOrderSource) utmSource = data.draftOrderSource;\n    if (data.draftOrderMedium) utmMedium = data.draftOrderMedium;\n    if (data.draftOrderCampaign) utmCampaign = data.draftOrderCampaign;\n  }\n\n  trace(\"In buildEvent after draft order check\");\n\n  if (isOrder()) {\n    utmSource = getUtmParam(payload, \"utm_source\");\n    utmMedium = getUtmParam(payload, \"utm_medium\");\n    utmCampaign = getUtmParam(payload, \"utm_campaign\");\n    utmTerm = getUtmParam(payload, \"utm_term\");\n    utmContent = getUtmParam(payload, \"utm_content\");\n    gclid = getUtmParam(payload, \"gclid\");\n    gclsrc = getQueryParamFromLandingPage(payload, \"gclsrc\");\n\n    const matchingSource = data.channelOrderSourceMedium\n      ? data.channelOrderSourceMedium.filter(\n          conf => payload.source_name === conf.channel\n        )\n      : [];\n\n    if (matchingSource.length > 0) {\n      if (matchingSource[0][\"source\"]) utmSource = matchingSource[0].source;\n      if (matchingSource[0][\"medium\"]) utmMedium = matchingSource[0].medium;\n      if (matchingSource[0][\"campaign\"])\n        utmCampaign = matchingSource[0].campaign;\n    }\n\n    const orderTags = payload.tags ? payload.tags.split(\", \") : [];\n    const matchingTags = data.tagOrderSourceMedium\n      ? data.tagOrderSourceMedium.filter(\n          conf => orderTags.indexOf(conf.tag) > -1\n        )\n      : [];\n\n    if (matchingTags.length > 0) {\n      if (matchingTags[0][\"source\"]) utmSource = matchingTags[0].source;\n      if (matchingTags[0][\"medium\"]) utmMedium = matchingTags[0].medium;\n      if (matchingTags[0][\"campaign\"]) utmCampaign = matchingTags[0].campaign;\n    }\n\n    event[\"client_id\"] = getClientId(payload);\n\n    gaClientId =\n      getGaClientId(payload) && getGaClientId(payload).length > 0\n        ? getGaClientId(payload)[0]\n        : \"Not provided\";\n  }\n  trace(\"In buildEvent after isOrder if\");\n\n  if (isRefund()) {\n    event[\"client_id\"] = payload[\"user_id\"] || \"\";\n    event[\"x-ga-mp1-ni\"] = \"1\";\n  }\n\n  const campaign = {};\n  if (utmSource) campaign[\"source\"] = utmSource;\n  if (utmMedium) campaign[\"medium\"] = utmMedium;\n  if (utmCampaign) campaign[\"name\"] = utmCampaign;\n\n  event[\"campaign\"] = campaign;\n\n  const prefix = \"x-ga-mp\" + version + \"-\";\n  if (utmSource) event[prefix + \"cs\"] = utmSource;\n  if (utmMedium) event[prefix + \"cm\"] = utmMedium;\n  if (utmCampaign) event[prefix + \"cn\"] = utmCampaign;\n  if (utmTerm) event[prefix + \"ck\"] = utmTerm;\n  if (utmContent) event[prefix + \"cc\"] = utmContent;\n  if (gclid) event[\"gclid\"] = gclid;\n  if (gclsrc) event[\"gclsrc\"] = gclsrc;\n  if (version === \"1\") {\n    event[\"x-ga-mp1-pa\"] = getEventName();\n    event[\"x-ga-mp1-tr\"] = payload.total_price;\n    event[\"event_category\"] = \"elevar enhanced ecommerce\";\n    event[\"event_action\"] = getEventName();\n  }\n\n  trace(\"In buildEvent after utm checks\");\n\n  log(\"Outgoing request to GA is \" + JSON.stringify(event));\n  log(\n    \"Google Analytics: \" +\n      payload.created_at +\n      \" \" +\n      utmSource +\n      \" / \" +\n      utmMedium +\n      \" client Id: \" +\n      gaClientId +\n      \" landing page: \" +\n      payload.landing_site\n  );\n\n  return event;\n};\n\nconst sendEventToGA = (event, payload, gaType) => {\n  trace(\"In sendEventToGA\");\n  sendEventToGoogleAnalytics(event, response => {\n    log(\"Response from \" + gaType + \" Analytics:\" + JSON.stringify(response));\n    if (!response.success) {\n      logResult(response.failure, payload, response.success, event, gaType);\n    } else {\n      const invalidValuesMessage = getInvalidParams(event);\n      let error;\n      if (invalidValuesMessage) {\n        error = {\n          code: -1,\n          error_user_title: invalidValuesMessage\n        };\n      }\n      logResult(\"\", payload, response.success, event, gaType);\n    }\n  });\n};\n\nconst getTypeOfWebhook = () => {\n  trace(\"In getTypeOfWebhook\");\n  if (isOrder()) return \"Order\";\n  if (isDraftOrder()) return \"Draft Order\";\n  if (isRefund()) return \"Refund\";\n};\n\n/*********** END HELPER FUNCTIONS *************/\n\n/************* MONITORING FUNCTIONS ***************/\n\nconst getLoggingEventName = () => {\n  trace(\"In getLoggingEventName\");\n  if (isRefund()) return \"Refund\";\n  if (isOrder()) return \"Purchase\";\n  if (isDraftOrder()) return \"Draft Order\";\n};\n\nconst getBaseLoggingData = (\n  errorResponse,\n  order,\n  successful,\n  event,\n  channel\n) => {\n  trace(\"In getBaseLoggingData\");\n  const containerVersion = getContainerVersion();\n  const params = {\n    successful: successful ? \"1\" : \"0\",\n    ss_client_id: containerVersion[\"containerId\"],\n    web_client_id: \"Webhook\",\n    channel: channel,\n    event_name: getLoggingEventName(),\n    page_url: \"\",\n    consent: \"\",\n    utm_source: event[\"x-ga-mp1-cs\"] || event[\"x-ga-mp2-cs\"],\n    utm_medium: event[\"x-ga-mp1-cm\"] || event[\"x-ga-mp2-cm\"],\n    utm_campaign: event[\"x-ga-mp1-cn\"] || event[\"x-ga-mp2-cn\"],\n    utm_term: event[\"x-ga-mp1-ck\"] || event[\"x-ga-mp2-ck\"],\n    utm_content: event[\"x-ga-mp1-cc\"] || event[\"x-ga-mp2-cc\"],\n    gclid: event.gclid\n  };\n  if (order) {\n    params.order_id = order.id;\n    params.revenue = order.total_price;\n    params.currency = order.currency;\n    params.request_url =\n      \"https://\" + getRequestHeader(\"host\") + getRequestPath();\n    params.customer_order_count = order.customer\n      ? order.customer.orders_count\n      : 0;\n    params.customer_total_spent = order.customer\n      ? order.customer.total_spent\n      : 0;\n  }\n  if (errorResponse) {\n    params.error_code = errorResponse.error_subcode || errorResponse.code;\n    params.error_message =\n      errorResponse.error_user_title || errorResponse.message;\n    params.attempted_request = JSON.stringify(event);\n  }\n  return params;\n};\n\nconst createLoggingUrl = (errorResponse, order, successful, event, channel) => {\n  trace(\"In createLoggingUrl\");\n  const params = getBaseLoggingData(\n    errorResponse,\n    order,\n    successful,\n    event,\n    channel\n  );\n  return data.monitoringEndpoint + \"?\" + serialize(params);\n};\n\nconst logResult = (errorResponse, order, successful, event, channel) => {\n  trace(\"In logResult\");\n  if (!data.monitoringEndpoint) return;\n  sendHttpGet(\n    createLoggingUrl(errorResponse, order, successful, event, channel),\n    (statusCode, __, ___) => {},\n    {\n      method: \"GET\",\n      timeout: 5000\n    }\n  );\n};\n\nconst logShopifyPayload = order => {\n  trace(\"In logShopifyPayload\");\n  logResult(false, order, true, {}, \"Shopify\");\n};\n\n/*********** END MONITORING FUNCTIONS *************/\nconst params = getRequestQueryParameters();\nif (\n  getRequestPath().indexOf(\"/shopify-orders.gif\") === 0 &&\n  params &&\n  params[\"test\"] === \"1\"\n) {\n  claimRequest();\n  setResponseBody(\"<h1>Hooray from Elevar!</h1>\");\n  returnResponse();\n}\n\nif (\n  getRequestPath().indexOf(\"/shopify-orders.gif\") === 0 &&\n  JSON.parse(getRequestBody())\n) {\n  claimRequest();\n  const payload = JSON.parse(getRequestBody());\n\n  log(getTypeOfWebhook() + \"from Shopify:\" + JSON.stringify(payload));\n\n  logShopifyPayload(payload);\n\n  if (\n    shouldSendOrder(payload) &&\n    shouldSendIfDraftOrder() &&\n    shouldSendIfRefund()\n  ) {\n    trace(\"After claim request main if for sending payload\");\n    if (data.enableGa3Events && data.ga3measurementId) {\n      const event = buildEvent(data.ga3measurementId, \"1\", payload);\n      sendEventToGA(event, payload, \"Universal Analytics\");\n    }\n\n    if (data.enableGa4Events && data.ga4measurementId) {\n      const event = buildEvent(data.ga4measurementId, \"2\", payload);\n      sendEventToGA(event, payload, \"GA4\");\n    }\n  }\n\n  setPixelResponse();\n  returnResponse();\n}\n\n\n___SERVER_PERMISSIONS___\n\n[\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"read_request\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"requestAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        },\n        {\n          \"key\": \"headerAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        },\n        {\n          \"key\": \"queryParameterAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"return_response\",\n        \"versionId\": \"1\"\n      },\n      \"param\": []\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"logging\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"environments\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"all\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"access_response\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"writeResponseAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        },\n        {\n          \"key\": \"writeHeaderAccess\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"specific\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"send_http\",\n        \"versionId\": \"1\"\n      },\n      \"param\": [\n        {\n          \"key\": \"allowedUrls\",\n          \"value\": {\n            \"type\": 1,\n            \"string\": \"any\"\n          }\n        }\n      ]\n    },\n    \"clientAnnotations\": {\n      \"isEditedByUser\": true\n    },\n    \"isRequired\": true\n  },\n  {\n    \"instance\": {\n      \"key\": {\n        \"publicId\": \"read_container_data\",\n        \"versionId\": \"1\"\n      },\n      \"param\": []\n    },\n    \"isRequired\": true\n  }\n]\n\n\n___TESTS___\n\nscenarios: []\n\n\n___NOTES___\n\nCreated on 1/15/2021, 1:22:19 PM\n\n\n"
            }
        ],
        "client": [
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "clientId": "1",
                "name": "Universal Analytics",
                "type": "ua_client",
                "parameter": [
                    {
                        "type": "BOOLEAN",
                        "key": "activateDefaultPaths",
                        "value": "true"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieManagement",
                        "value": "server"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieName",
                        "value": "FPID"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieDomain",
                        "value": "auto"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookiePath",
                        "value": "/"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieMaxAgeInSec",
                        "value": "63072000"
                    }
                ],
                "fingerprint": "1627417540515"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "clientId": "2",
                "name": "GA4",
                "type": "gaaw_client",
                "parameter": [
                    {
                        "type": "BOOLEAN",
                        "key": "activateDefaultPaths",
                        "value": "true"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieManagement",
                        "value": "server"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieName",
                        "value": "FPID"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieDomain",
                        "value": "auto"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookiePath",
                        "value": "/"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "cookieMaxAgeInSec",
                        "value": "63072000"
                    }
                ],
                "fingerprint": "1627417540515"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "clientId": "10",
                "name": "Facebook Events",
                "type": "cvt_49102390_5",
                "parameter": [
                    {
                        "type": "BOOLEAN",
                        "key": "debug",
                        "value": "true"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "facebookPixelId",
                        "value": "{{FB Pixel ID}}"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "facebookAccessToken",
                        "value": "{{FB Conversions API Token}}"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "facebookApiVersion",
                        "value": "v11.0"
                    }
                ],
                "fingerprint": "1627632121125",
                "parentFolderId": "6",
                "notes": "This is our latest version as of March 1st 2021. Please follow this guide:\n\nhttps://knowledge.getelevar.com/how-to-configure-facebook-conversion-api"
            },
            {
                "accountId": "4702886441",
                "containerId": "49102390",
                "clientId": "12",
                "name": "Google Tag Manager Web Container Proxy",
                "type": "gtm_client",
                "parameter": [
                    {
                        "type": "LIST",
                        "key": "allowedContainerIds",
                        "list": [
                            {
                                "type": "MAP",
                                "map": [
                                    {
                                        "type": "TEMPLATE",
                                        "key": "containerId",
                                        "value": "{{GTM Web Container ID}}"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "fingerprint": "1627632107947"
            }
        ]
    }
}